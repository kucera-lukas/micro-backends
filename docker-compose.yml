version: "3"

services:
  backend_service:
    build:
      context: backend_service
      dockerfile: backend_service/Dockerfile.dev
    ports:
      - "8080:8080"
    env_file:
      - backend_service/.env
    volumes:
      - ./backend_service/:/app
    networks:
      - micro_backends
    depends_on:
      - mongo_service
      - postgres_service
      - rabbitmq

  mongo_service:
    build:
      context: mongo_service
      dockerfile: mongo_service/Dockerfile.dev
    ports:
      - "8081:8081"
    env_file:
      - mongo_service/.env
    volumes:
      - ./mongo_service/:/app
    networks:
      - micro_backends
    depends_on:
      - rabbitmq
      - mongodb

  postgres_service:
    build:
      context: postgres_service
      dockerfile: postgres_service/Dockerfile.dev
    ports:
      - "8082:8082"
    env_file:
      - postgres_service/.env
    volumes:
      - ./postgres_service/:/app
    networks:
      - micro_backends
    depends_on:
      - rabbitmq
      - postgres

  rabbitmq:
    image: rabbitmq:management
    restart: always
    ports:
      # AMQP protocol port
      - "5673:5672"
      # HTTP management UI
      - "15673:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - micro_backends

  mongodb:
    image: bitnami/mongodb:latest
    restart: always
    ports:
      - "27018:27017"
    environment:
      MONGODB_ROOT_USER: mongo
      MONGODB_ROOT_PASSWORD: mongo
      MONGODB_USERNAME: mongo
      MONGODB_PASSWORD: mongo
      MONGODB_DATABASE: micro_backends
    volumes:
      - mongodb:/bitnami/mongodb
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo -u mongo -p mongo --quiet | grep 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - micro_backends

  postgres:
    image: postgres:latest
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: micro_backends
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./postgres_service/init/database.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - micro_backends

volumes:
  backend_service:
  mongo_service:
  postgres_service:
  rabbitmq:
  mongodb:
  postgres:

networks:
  micro_backends:
    driver: bridge
