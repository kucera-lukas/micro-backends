// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type GlobalMessageCountPayload struct {
	Count int `json:"count"`
}

type GlobalMessagesPayload struct {
	Messages []*Message `json:"messages"`
}

type Message struct {
	ID       string    `json:"id"`
	Data     string    `json:"data"`
	Created  time.Time `json:"created"`
	Modified time.Time `json:"modified"`
}

type MessageCountPayload struct {
	Count    int             `json:"count"`
	Provider MessageProvider `json:"provider"`
}

type MessageCreatedPayload struct {
	Message  *Message        `json:"message"`
	Provider MessageProvider `json:"provider"`
}

type MessagePayload struct {
	Message  *Message        `json:"message"`
	Provider MessageProvider `json:"provider"`
}

type MessagesPayload struct {
	Messages []*Message      `json:"messages"`
	Provider MessageProvider `json:"provider"`
}

type NewGlobalMessageInput struct {
	Data string `json:"data"`
}

type NewGlobalMessagePayload struct {
	Status string `json:"status"`
}

type NewMessageInput struct {
	Provider MessageProvider `json:"provider"`
	Data     string          `json:"data"`
}

type NewMessagePayload struct {
	Message  *Message        `json:"message"`
	Provider MessageProvider `json:"provider"`
}

type MessageProvider string

const (
	MessageProviderMongo    MessageProvider = "MONGO"
	MessageProviderPostgres MessageProvider = "POSTGRES"
)

var AllMessageProvider = []MessageProvider{
	MessageProviderMongo,
	MessageProviderPostgres,
}

func (e MessageProvider) IsValid() bool {
	switch e {
	case MessageProviderMongo, MessageProviderPostgres:
		return true
	}
	return false
}

func (e MessageProvider) String() string {
	return string(e)
}

func (e *MessageProvider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MessageProvider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MessageProvider", str)
	}
	return nil
}

func (e MessageProvider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
